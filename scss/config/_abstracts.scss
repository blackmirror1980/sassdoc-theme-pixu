// Accoutrement Utils
// ==================

/// # Pixu Config: Private Helpers
/// @group config-utils

// Functions
// ---------
/// These functions will be made available to
/// accoutrement-color & accoutrement-scale tools,
/// for use in the `$colors` and `$sizes` configuration maps.
/// Register additional functions as needed,
/// or establish alias names for existing functions.
///
/// @group config-utils
/// @type map
///
/// @link http://oddbird.net/accoutrement-color Accoutrement-Color
/// @link http://oddbird.net/accoutrement-scale Accoutrement-Scale
///
/// @prop {function | string} <alias> -
///   Use `get-function()` to capture a first-class function,
///   or use a string to reference existing functions and alias-keys
$functions: (
  'darken': get-function('darken'),
  'desaturate': get-function('desaturate'),
  'rgba': get-function('rgba'),
  'convert': 'convert-units'
);

// Config
// ------
/// Internal utility for managing Pixu and Accoutrement maps
/// in one single mixin.
/// In preparation for the Sass 3.5+ modular syntax,
/// this can only be done in the project being documented,
/// and is not included as part of the Pixu API.
///
/// @group config-utils
/// @link http://oddbird.net/accoutrement-color Accoutrement-Color
/// @link http://oddbird.net/accoutrement-type Accoutrement-Type
/// @link http://oddbird.net/accoutrement-scale Accoutrement-Scale
///
/// @param {string} $type -
///   The type of data being added, e.g.
///   `color/s`, `font/s`, `ratio/s`, `size/s`.
/// @param {string} $name -
///   The reference key for accessing this data.
///   This should generally be the same as the variable name --
///   e.g. `'brand-colors'` for the `$brand-colors` variable.
/// @param {map} $value -
///   The map data to be added to both
///   Accoutrement globals and Pixu export.
///
/// @example scss
///   $brand-colors: (
///     'brand-orange': hsl(24, 100%, 39%),
///     'brand-blue': hsl(195, 85%, 35%),
///     'brand-pink': hsl(330, 85%, 48%) ('shade': 25%),
///   );
///
///   @include config('colors', 'brand-colors', $brand-colors);
@mixin config($type, $name, $value) {
  @if index('color' 'colors', $type) {
    @include add-colors($value);
    @include pixu-add($type, $name, $value, get-function('color'));
  } @else if index('size' 'sizes', $type) {
    $sizes: map-merge($sizes, $value) !global;
    @include pixu-add($type, $name, $value, get-function('size'));
  } @else if index('ratio' 'ratios', $type) {
    $ratios: map-merge($ratios, $value) !global;
    @include pixu-add($type, $name, $value, get-function('ratio'));
  } @else if index('font' 'fonts', $type) {
    @include add-font($name, $value);
    @include pixu-add($type, $name, $value);
  }
}
