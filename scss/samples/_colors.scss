// Color Samples
// =============

/// # Documenting colors
///
/// Pixu provides custom annotations
/// for visualizing color palettes,
/// along with other design tokens.
/// See the [`sass.jsonfile` configuration][json]
/// to ensure that Pixu has access
/// to your exported Sass data.
///
/// [json]: CONFIGURATION.html#sass-jsonfile
///
/// Whether you store colors as individual variables
/// or group them into a map,
/// you can use Pixu to document and display color palettes.
/// In the end, Pixu will need a map
/// converted to JSON --
/// but we'll start with individual colors,
/// and build the export from there.
///
/// For this demo, we've defined two brand colors:
///
/// ```scss
/// $brand-blue: hsl(195, 85%, 35%);
/// $brand-pink: hsl(330, 85%, 48%);
/// ```
///
/// @group demo_colors

$brand-blue: hsl(195, 85%, 35%);
$brand-pink: hsl(330, 85%, 48%);

/// ## Preview color maps as palettes
///
/// In order to export our colors to Pixu,
/// we'll want to combine them into a map
/// of name/value pairs.
/// Sass does not provide any shortcuts for automating this step,
/// or removing the duplication,
/// but you can use a tool like our [Accoutrement-Color][color]
/// to store and access colors
/// directly in a Pixu-friendly map.
///
/// [color]: http://oddbird.net/accoutrement-color/
///
/// Create as many maps as you like
/// to organize different palettes --
/// primary, secondary, button-colors, etc.
/// Each map will be displayed individually,
/// using the `@colors` annotation:
///
/// ```scss
/// /// @colors
/// ```
///
/// The `@colors` annotation accepts an optional one-word key argument,
/// which defaults to name of the code being documented
/// (that is, the name of the variable/function/mixin
/// on the first line after the `///` SassDoc documentation).
/// That key will be used to access the data from JSON,
/// so it doesn't matter what key is used,
/// as long as the key given here matches the group-name
/// used when adding this data to `$pixu`.
///
/// ```scss
/// /// @colors my-colors
/// ```
///
/// By default, our color palettes display
/// `name`, `hex`, `rgb(a)`, and `hsl(a)` for every color.
/// You can change what color values are shown
/// in the SassDoc/Pixu configuration
/// using the `pixu.displayColors` option:
///
/// ```yaml
/// pixu:
///   displayColors:
///     - hex
///     - hsl
/// ```
///
/// @colors
/// @group demo_colors
$demo-colors: (
  'brand-blue': $brand-blue,
  'brand-pink': $brand-pink
);

/// ## Add color-data to $pixu
///
/// In order to preview the `$demo-colors` palette,
/// we need to export the data to JSON.
/// That's a two-step process:
/// first building the export-map,
/// and then creating a sass file to do the actual export.
/// We provide shortcuts to help with both.
///
/// Use the `pixu-add` mixin to add individual data maps
/// to the global export map.
///
/// ```scss
///  @include pixu-add('colors', 'demo-colors', $demo-colors);
/// ```
///
/// - The first argument tells Pixu what type of data is being added --
///   in this case `colors`.
///   Pixu will organize the output JSON into subgroups by type.
///   We use this to our advantage,
///   passing the exported colors to application-js as well as Pixu,
///   so colors defined in Sass can be accessed in JavaScript.
/// - The second argument sets a `key` name
///   for accessing this particular group of colors.
///   The `pixu-add` key should match
///   the key provided to `@colors`.
/// - The third argument provides the actual map of data
///   to be added to the `$pixu` export map.
///
/// The result is an export map that looks like this:
///
/// ```scss
/// $pixu: (
///   'colors': (
///     'demo-colors': (
///       'brand-blue': hsl(195, 85%, 35%),
///       'brand-pink': hsl(330, 85%, 48%),
///     ),
///   ),
/// );
/// ```
///
/// You can also build that map by hand, if you prefer.
///
/// [See the color map documentation for details Â»][color-docs]
///
/// [color-docs]: api_json-export.html#colors
///
/// @see $pixu
/// @see pixu-add
/// @group demo_colors
@include pixu-add('colors', 'demo-colors', $demo-colors);

$demo-noncolors: (
  'light-gray': 'brand-blue' ('tint': 80%, 'desaturate': 80%),
  'gray': 'brand-blue' ('desaturate': 80%),
  'black': 'brand-blue' ('shade': 30%, 'desaturate': 80%)
);

/// ## Compile and export complex maps
///
/// At OddBird, we store our colors in more complex maps,
/// where the values need to be parsed and compiled
/// before they can be exported to Pixu.
/// Using [accoutrement-color][ac], our maps look like this:
///
/// [ac]: http://oddbird.net/accoutrement-color
///
/// ```scss
/// $demo-noncolors: (
///   'light-gray': 'brand-blue' ('tint': 80%, 'desaturate': 80%),
///   'gray': 'brand-blue' ('desaturate': 80%),
///   'black': 'brand-blue' ('shade': 30%, 'desaturate': 80%),
/// );
/// ```
///
/// Our `color()` function knows how to interpret that syntax
/// and compile actual colors based on our map notation.
/// In order to export real color data to Pixu,
/// we want to run every value in our map
/// through the color function before exporting.
/// `pixu-add` accepts additional arguments at the end,
/// for passing each map-value through a function.
/// Provide a function name (Sass 3.4-),
/// or first-class function (Sass 3.5+)
/// along with any additional arguments required for that function.
///
/// @colors demo-noncolors
/// @example scss
///   $pixu: ();
///   $demo-noncolors: (
///     'light-gray': 'brand-blue' ('tint': 80%, 'desaturate': 80%),
///     'gray': 'brand-blue' ('desaturate': 80%),
///     'black': 'brand-blue' ('shade': 30%, 'desaturate': 80%),
///   );
///
///   @include pixu-add(
///     'colors', 'demo-noncolors', $demo-noncolors,
///     get-function('color') // function
///   );
///
///   /* #{$pixu} */
///
/// @group demo_colors
/// @link http://oddbird.net/accoutrement-color Accoutrement-Color
@include pixu-add(
  'colors',
  'demo-noncolors',
  $demo-noncolors,
  get-function('color')
);
