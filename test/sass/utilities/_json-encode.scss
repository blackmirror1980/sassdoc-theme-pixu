// JSON Encoding Tests
// ===================

// JSON Encode
// -----------
@include describe('pixu-encode [function]') {
  @include it('returns a boolean without encoding') {
    @include assert-equal(_pixu-encode(true), true);
  }

  @include it('returns a string for null values') {
    @include assert-equal(_pixu-encode(null), 'null');
  }

  @include it('encodes each value in a list') {
    @include assert-equal(_pixu-encode(one two 3), '["one", "two", 3]');
  }

  @include it('encodes each key/value in a map') {
    $map: (
      1: (a, b, c),
      'two': 3em,
      'three' 'four': 'hello "world"'
    );

    @include assert-equal(
      _pixu-encode($map),
      '{"1": ["a", "b", "c"], "two": "3em", "three four": "hello \\"world\\""}'
    );
  }

  @include it('returns a string value of unitless numbers') {
    @include assert-equal(_pixu-encode(3), '3');
  }

  @include it('returns quoted color strings') {
    $hex: #333;
    $rgba: rgba(0, 255, 130, 0.75);
    $hsla: hsla(120, 50%, 80%, 0.75);

    @each $color in ($hex, $rgba, $hsla) {
      @include assert-equal(_pixu-encode($color), '"#{$color}"');
    }
  }

  @include it('returns quoted and escaped strings') {
    @include assert-equal(_pixu-encode('hello "world"'), '"hello \\"world\\""');
  }

  @include it('returns escaped backslashes in strings') {
    @include assert-equal(_pixu-encode('hello\\world'), '"hello\\\\world"');
  }
}

// Encode List
// -----------
@include describe('pixu-encode-list [function]') {
  @include it('encodes each value in a list') {
    @include assert-equal(_pixu-encode-list(one two 3), '["one", "two", 3]');
  }
}

// Encode Map
// ----------
@include describe('pixu-encode-map [function]') {
  @include it('encodes each key/value in a map') {
    $map: (
      1: (a, b, c),
      'two': 3em,
      three four: 'hello "world"'
    );

    @include assert-equal(
      _pixu-encode-map($map),
      '{"1": ["a", "b", "c"], "two": "3em", "three four": "hello \\"world\\""}'
    );
  }
}

// Encode Number
// -------------
@include describe('pixu-encode-number [function]') {
  @include it('returns a string value of unitless numbers') {
    @include assert-equal(_pixu-encode-number(3), '3');
  }

  @include it('returns a scare-quoted value of lengths') {
    @include assert-equal(_pixu-encode-number(3em), '"3em"');
  }
}

// Pixu Quote
// ------------
@include describe('pixu-quote [function]') {
  @include it('converts values to strings') {
    @include assert-equal(_pixu-quote(1em), '"1em"');

    @include assert-equal(_pixu-quote('one' 'two' 'three'), '"one two three"');
  }
}

// String Replace
// --------------
@include describe('pixu-escape-quotes [function]') {
  @include it('replaces a single sub-string') {
    @include assert-equal(
      _pixu-escape-quotes('hello "world"'),
      'hello \\"world\\"'
    );
  }
}

// Escape Backslashes
// ------------------
@include describe('pixu-escape-backslashes [function]') {
  @include it('escapes backslashes in string') {
    @include assert-equal(
      _pixu-escape-backslashes('hello\\world'),
      'hello\\\\world'
    );
  }
}
