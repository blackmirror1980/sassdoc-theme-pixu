// Map Utility Tests
// =================

$colors-initial: (
  'brand-blue': hsl(195, 85%, 35%),
  'light-gray': 'brand-blue' ('tint': 80%, 'desaturate': 80%),
  'gray': 'brand-blue' ('desaturate': 80%),
  'black': 'brand-blue' ('shade': 30%, 'desaturate': 80%)
);

$colors-compiled: (
  'brand-blue': #0d7fa5,
  'light-gray': #dedede,
  'gray': #555b5e,
  'black': #3b4042
);

$darken: (
  'brand-blue': #063646,
  'light-gray': #ababab,
  'gray': #252728,
  'black': #0b0c0c
);

$sizes: (
  'root': 20px,
  'rhythm': 'root' ('fifth': 1, 'convert': 'rem')
);

$sizes-compiled: (
  'root': 20px,
  'rhythm': 1.5rem
);

// Map Compile
// -----------
@include describe('pixu-map-compile [function]') {
  @include it('returns a map with values run through a given function') {
    @include assert-equal(
      pixu-map-compile($sizes, get-function('size')),
      $sizes-compiled,
      $inspect: true
    );
  }

  @include it('allows extra args be passed in') {
    @include assert-equal(
      pixu-map-compile($colors-compiled, get-function('darken'), 20%),
      $darken,
      $inspect: true
    );
  }
}

// Pixu Add
// ----------
@include describe('pixu-add [mixin]') {
  $pixu: () !global;
  $empty: ();

  @include it('adds a map to the $pixu global') {
    @include assert-equal($pixu, $empty);

    @include pixu-add('colors', 'compiled', $colors-compiled);
    $expect: ('colors': ('compiled': $colors-compiled));

    @include assert-equal($pixu, $expect);
  }

  @include it('adds to existing data of the type') {
    @include pixu-add('colors', 'darken', $darken);
    $existing: map-get($pixu, 'colors');
    $new: ('compiled': $colors-compiled);
    $expect: ('colors': map-merge($existing, $new));

    @include assert-equal($pixu, $expect);
  }

  @include it('accepts compilation functions') {
    $pixu: () !global;

    @include assert-equal($pixu, $empty);

    @include pixu-add(
      'colors',
      'dark',
      $colors-compiled,
      get-function('darken'),
      20%
    );
    $expect: ('colors': ('dark': $darken));

    @include assert-equal($pixu, $expect, $inspect: true);
  }
}
